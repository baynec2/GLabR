#getting the colums for neck circumference
NC_index = which(grepl("Neck Circumf",measurements))
#getting the column indexes we need
L_index = NC_index + 1
W_index = L_index + 1
V_index = W_index + 1
#extracting the data
NC = data[2:(nrow(mouse_id)+1),NC_index]
L = data[2:(nrow(mouse_id)+1),L_index]
W = data[2:(nrow(mouse_id)+1),W_index]
V = data[2:(nrow(mouse_id)+1),V_index]
# Flipping data structure
data_w = data.frame(neck_circumference = NC, l_mm = L, W_mm = W, vol_mm3 = V) %>%
tidyr::pivot_longer(1:length(.)) %>%
mutate(name = gsub("\\..*","",name))
# Adding missing data
data_w$days = as.numeric(rep(as.character(days[,1]),nrow(mouse_id)* 4))
data_w$mouse_id = rep(as.character(mouse_id[,1]),each = nrow(days) * 4)
data_w$cage_number = as.numeric(rep(cage_number,each = nrow(days) * 4))
data_w$value = as.numeric(data_w$value)
#assigning responder status based on final volume
# 0-5 = responder
# 5-115 = stable
# 115 = non responder
max_days = max(as.numeric(as.character(days[,1])))
assignment = data_w %>%
dplyr::filter(days == max_days,
name == "vol_mm3") %>%
dplyr::mutate(responder_status = case_when(value < 5 ~ "responder",
value >= 5 & value <= 115 ~ "stable",
TRUE ~ "non responder")) %>%
dplyr::select(mouse_id,responder_status)
data_f = data_w %>%
dplyr::mutate(experiment = experiment,
cage_id = paste0(experiment,"_",cage_number)) %>%
dplyr::select(experiment,mouse_id,cage_id,cage_number,day = days,measurement = name, value)
#adding the responder status
data_f = inner_join(data_f,assignment,by = "mouse_id")
return(data_f)
}
#iterating through all of the sheets
out = purrr::map_df(sheets,parse)
return(out)
}
parsed_data = parse_4MOSC1_kinetic("tests/testdata/parse_4MOSC1_kinetics/LiBIO_kinetics.xlsx",sheets = c(2,3,6))
View(parsed_data)
rm(list = ls())
parsed_data = parse_4MOSC1_kinetic("tests/testdata/parse_4MOSC1_kinetics/LiBIO_kinetics.xlsx",sheets = c(2,3,6))
#'
#' @param filepath
#' @param sheets
#'
#' @return a tidy tibble
#' @export
#'
#' @examples
#' parsed_data = parse_4MOSC1_kinetic(tests/testdata/parse_4MOSC1_kinetics/LiBIO_kinetics.xlsx",
#' sheets = c(2,3,6))
parse_4MOSC1_kinetic = function(filepath,sheets){
# Defining the parse function
parse = function(sheet){
#Reading in the data
data = readxl::read_excel(filepath,sheet)
#Defining the mouse_ids
mouse_id = data[2:nrow(data),2]
colnames(mouse_id) = "mouse_id"
#Finding out how many samples there are
is_not_na = !is.na(mouse_id)
n_samples = sum(is_not_na)
mouse_id = mouse_id[1:n_samples,] %>%
as.data.frame()
#Finding out how many days there are
colnames = colnames(data)
days = stringr::str_extract(colnames,"day.*")
days = days[!is.na(days)]
days = gsub("day ","",days)
days = data.frame(day = days)
#Adding cage_number
cage_number = rep(1:(floor(nrow(mouse_id)/5)),5)
remainder = nrow(mouse_id) - length(cage_number)
if(remainder > 0){
add = 1:remainder
cage_number = c(cage_number,add) %>% sort()
} else{
cage_number = cage_number %>% sort()
}
#Adding response status
#Extracting the sheet name
current_sheet = readxl::excel_sheets(filepath)[sheet]
#Binding the sheet name to to make unique cage numbers across experiments
experiment = current_sheet
#Parsing the measurements
measurements = as.character(data[1,])
#getting the colums for neck circumference
NC_index = which(grepl("Neck Circumf",measurements))
#getting the column indexes we need
L_index = NC_index + 1
W_index = L_index + 1
V_index = W_index + 1
#extracting the data
NC = data[2:(nrow(mouse_id)+1),NC_index]
L = data[2:(nrow(mouse_id)+1),L_index]
W = data[2:(nrow(mouse_id)+1),W_index]
V = data[2:(nrow(mouse_id)+1),V_index]
# Flipping data structure
data_w = data.frame(neck_circumference = NC, l_mm = L, W_mm = W, vol_mm3 = V) %>%
tidyr::pivot_longer(1:length(.)) %>%
mutate(name = gsub("\\..*","",name))
# Adding missing data
data_w$days = as.numeric(rep(as.character(days[,1]),nrow(mouse_id)* 4))
data_w$mouse_id = rep(as.character(mouse_id[,1]),each = nrow(days) * 4)
data_w$cage_number = as.numeric(rep(cage_number,each = nrow(days) * 4))
data_w$value = as.numeric(data_w$value)
#assigning responder status based on final volume
# 0-5 = responder
# 5-115 = stable
# 115 = non responder
max_days = max(as.numeric(as.character(days[,1])))
assignment = data_w %>%
dplyr::filter(days == max_days,
name == "vol_mm3") %>%
dplyr::mutate(responder_status = case_when(value < 5 ~ "responder",
value >= 5 & value <= 115 ~ "stable",
TRUE ~ "non responder")) %>%
dplyr::select(mouse_id,responder_status)
data_f = data_w %>%
dplyr::mutate(experiment = experiment,
cage_id = paste0(experiment,"_",cage_number)) %>%
dplyr::select(experiment,mouse_id,cage_id,cage_number,day = days,measurement = name, value)
#adding the responder status
data_f = inner_join(data_f,assignment,by = "mouse_id")
return(data_f)
}
#iterating through all of the sheets
out = purrr::map_df(sheets,parse)
return(out)
}
parsed_data = parse_4MOSC1_kinetic("tests/testdata/parse_4MOSC1_kinetics/LiBIO_kinetics.xlsx",sheets = c(2,3,6))
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
library(GLabR)
rm(list = ls())
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
data = GLabR::parse_4MOSC1_kinetic("Cage_effect_analysis.Rmd",c(2,3,6))
data = GLabR::parse_4MOSC1_kinetic("../LiBIO_kinetics.xlsx",c(2,3,6))
View(data)
data = GLabR::parse_4MOSC1_kinetic("../LiBIO_kinetics.xlsx",c(2,3,6)) %>%
filter(measurement = "vol_mm3")
data = GLabR::parse_4MOSC1_kinetic("../LiBIO_kinetics.xlsx",c(2,3,6)) %>%
filter(measurement == "vol_mm3")
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C")
p1
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C",discrete = T)
p1
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C",discrete = T)+
theme(legend.position = "none")
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C",discrete = T)+
theme(legend.position = "none")
p1
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C",discrete = T)+
theme(legend.position = "none")+
ggtitle("Response Status by Cage Number")
p1
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_number,responder_status) %>%
distinct() %>%
select(-mouse_id)
View(tb)
test = fisher.test(table(tb))
ggbarstats(
tb, cage_number, responder_status,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
library(ggstatsplot)
install.packages(ggstatsplot)
install.packages("ggstatsplot")
install.packages("ggstatsplot")
library(ggstatsplot)
install.packages("ggstatsplot")
install.packages("ggstatsplot")
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
library(ggstatsplot)
library("ggstatsplot")
library("ggstatsplot")
install.packages("ggstatsplot")
install.packages("ggstatsplot")
library(tidyverse)
library(tidyverse)
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
data = GLabR::parse_4MOSC1_kinetic("../LiBIO_kinetics.xlsx",c(2,3,6)) %>%
filter(measurement == "vol_mm3")
p1 = data %>%
ggplot(aes(day,value,color = cage_id))+
geom_point()+
geom_line(aes(group = mouse_id))+
facet_wrap(~cage_id)+
viridis::scale_color_viridis(option = "C",discrete = T)+
theme(legend.position = "none")+
ggtitle("Response Status by Cage Number")+
ylab("Tumor Volume")
p1
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_number,responder_status) %>%
distinct() %>%
select(-mouse_id)
test = fisher.test(table(tb))
library("ggstatsplot")
ggbarstats(
tb, cage_number, responder_status,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
ggbarstats(
tb, responder_status, cage_number,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_id,responder_status) %>%
distinct() %>%
select(-mouse_id)
test = fisher.test(table(tb))
```{r}
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_id,responder_status) %>%
distinct() %>%
select(-mouse_id)
View(tb)
test = fisher.test(table(tb))
test = fisher.test(table(tb),simulate.p.value = TRUE)
library("ggstatsplot")
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_id,responder_status) %>%
distinct() %>%
select(-mouse_id)
test = fisher.test(table(tb),simulate.p.value = TRUE)
library("ggstatsplot")
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)+coord_flip()
)
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)++coord_flip()
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)+coord_flip()
?fisher.test
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)+coord_flip()+
viridis::scale_color_viridis(discrete = TRUE)
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)+
coord_flip()+
viridis::scale_fill_viridis(discrete = TRUE)
summary(test)
test
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_id,responder_status) %>%
distinct() %>%
select(-mouse_id)
test = fisher.test(table(tb),simulate.p.value = TRUE)
library("ggstatsplot")
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)+
coord_flip()+
viridis::scale_fill_viridis(discrete = TRUE)+
ggtitle("Responder status by cage")
tb = data %>%
filter(!is.na(responder_status)) %>%
select(mouse_id,cage_id,responder_status) %>%
distinct() %>%
select(-mouse_id)
test = fisher.test(table(tb),simulate.p.value = TRUE)
library("ggstatsplot")
ggbarstats(
tb, responder_status, cage_id,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)+
coord_flip()+
viridis::scale_fill_viridis(discrete = TRUE)+
ggtitle("Responder status by cage")
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(GLabR)
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt")
View(data)
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("_A.*_",`Spectrum File`),
plex = "Plex1")
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub(".*_A | _16Plex.*",`Spectrum File`),
plex = "Plex1")
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub(".*_A | _16Plex.*","",`Spectrum File`),
plex = "Plex1")
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("(.*_A)|(_16Plex.*)","",`Spectrum File`),
plex = "Plex1")
View(data)
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("(.*_A)|(_16plex.*)","",`Spectrum File`),
plex = "Plex1")
View(data)
#Fixing file format
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("(.*_A)|(_16plex.*)","",`Spectrum File`),
plex = "Plex1") %>%
mutate(`Spectrum File` = paste0(plex,"_",Fraction)) %>%
select(-plex,Fraction)
View(data)
norm = data %>%
combine_psm_fractions() %>%
normalize_1plex()
View(data)
#Fixing file format to be compatible with naming conventions
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("(.*_A)|(_16plex.*)","",`Spectrum File`),
plex = "Plex1") %>%
mutate(`Spectrum File` = paste0(plex,"_",Fraction)) %>%
select(-plex,Fraction) %>%
rename(`Master Protein Accessions` = MasterProteinAccessions)
#Normalizing data
norm = data %>%
combine_psm_fractions() %>%
normalize_1plex()
View(norm)
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(GLabR)
data = parse_stratus("55BDD4B6-297D-41E1-9488-4C124206B77E.csv")
View(data)
#writing data to file
write_csv(data,"parsed_OD600.csv")
p1 = data %>%
ggplot(aes(time_hr,od600))+
geom_line()+
facet_wrap(~well)
p1
p1 = data %>%
ggplot(aes(time_hr,od600))+
geom_point()+
geom_line()+
facet_wrap(~well)
p1
library(tidyverse)
library(GLabR)
# parsing data
data = parse_stratus("55BDD4B6-297D-41E1-9488-4C124206B77E.csv")
#writing data to file
write_csv(data,"parsed_OD600.csv")
#Plotting to check data
p1 = data %>%
ggplot(aes(time_hr,od600))+
geom_point()+
geom_line()+
facet_wrap(~well)
ggsave("curves_by_well.jpg",p1)
ggsave("curves_by_well.jpg",p1,height = 10,width = 12)
#Plotting to check data
p1 = data %>%
ggplot(aes(time_hr,od600))+
geom_point()+
geom_line()+
facet_wrap(~well)
View(data)
#Plotting to check data
p1 = data %>%
ggplot(aes(time_hr,od600))+
geom_point()+
geom_line()+
facet_wrap(~well)
p1
View(data)
unique(data$time_hr)
devtools::install_github("baynec2/GlabR")
library(GLabR)
library(GLabR)
download.file.method
?download.file
options(download.file)
getOption("download.file.method")
knitr::opts_chunk$set(echo = TRUE)
library(GLabR)
library(tidyverse)
#Fixing file format to be compatible with naming conventions
data = read_delim("Bobby_Plex1_Repeat_PSMs.txt") %>%
mutate(Fraction = gsub("(.*_A)|(_16plex.*)","",`Spectrum File`),
plex = "Plex1") %>%
mutate(`Spectrum File` = paste0(plex,"_",Fraction)) %>%
select(-plex,Fraction) %>%
rename('Master Protein Accessions' = MasterProteinAccessions)
#Normalizing data
norm = data %>%
combine_psm_fractions() %>%
normalize_1plex()
View(norm)
md = readxl::read_excel("metadata.xlsx")
View(md)
all = dplyr::inner_join(norm,md,by = "TMT")
View(all)
sessionInfo()
folder_path = "../Downloads/30-839201413_Data/"
p1 = sangeranalyzeR::make.consensus.seqs(folder_path, forward.suffix = "SeqF.ab1",
reverse.suffix = "SeqR.ab1")
library(sangeranalyseR)
p1 = make.consensus.seqs(folder_path, forward.suffix = "SeqF.ab1",
reverse.suffix = "SeqR.ab1")
