#      GLabR::combine_psm_fractions() %>%
#      GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t()
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t2()
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t2()
rm(list =ls())
library(MASS)
la_box_cox_norm_t2 = function(data,data_format = "long"){
#  #testing
# data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
#      GLabR::combine_psm_fractions() %>%
#      GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t2()
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t()
#  #testing
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
GLabR::combine_psm_fractions() %>%
GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#  #testing
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
GLabR::combine_psm_fractions() %>%
GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
la_box_cox_norm_t2 = function(data,data_format = "long"){
#  #testing
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
GLabR::combine_psm_fractions() %>%
GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t()
la_box_cox_norm_t= function(data,data_format = "long"){
#  #testing
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
GLabR::combine_psm_fractions() %>%
GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t()
library(MASS)
la_box_cox_norm_t= function(data,data_format = "long"){
#  #testing
# data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
#       GLabR::combine_psm_fractions() %>%
#       GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t()
library(MASS)
la_box_cox_norm_t4= function(data,data_format = "long"){
#  #testing
# data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
#       GLabR::combine_psm_fractions() %>%
#       GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t4()
library(MASS)
la_box_cox_norm_t4= function(data,data_format = "long"){
data2 = data
#  #testing
# data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
#       GLabR::combine_psm_fractions() %>%
#       GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data2 %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t4()
rm(list = ls())
library(MASS)
la_box_cox_norm_t4= function(data,data_format = "long"){
data2 = data
#  #testing
# data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
#       GLabR::combine_psm_fractions() %>%
#       GLabR::normalize_to_bridge(bridge_channel_plex = 126)
# Had to modify data to make compatible with leighana's script. Removed all nas, infinte values, and 0s.
#Transformed to wide format to do lm in column format (didn't feel like figuring out how to do this within the tidyverse)
mod_data = data2 %>%
dplyr::select(Sample,TMT,ProteinID,final_norm) %>%
dplyr::filter(is.finite(final_norm),
final_norm != 0 ) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"),values_from = "final_norm") %>%
na.omit() %>%
as.data.frame()
# Leigh-ana's script
transformed_data <- matrix(data=NA,nrow=length(mod_data$ProteinID),ncol=length(mod_data)-1)
rownames(transformed_data) <- mod_data$ProteinID
colnames(transformed_data) <- colnames(mod_data)[2:length(mod_data)]
for(i in 2:length(mod_data)){
temp <- mod_data[,i]
b <- MASS::boxcox(lm(temp ~ 1),plotit = FALSE,interp = TRUE)
lambda <- b$x[which.max(b$y)]
new_data <- (temp^lambda - 1)/lambda
scaled_data <- reshape::rescaler(new_data,type="range")
scaled_data <- scaled_data/mean(scaled_data,na.rm = TRUE)
transformed_data[,i-1] <- scaled_data
}
#transforming final data into long data format
output = transformed_data %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "ProteinID") %>%
tibble::as_tibble() %>%
tidyr::pivot_longer(2:length(.)) %>%
tidyr::separate(name, into = c("Sample", "TMT"),sep = "_") %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values = value) %>%
dplyr::inner_join(data,by = c("Sample", "TMT", "ProteinID")) %>%
dplyr::select(Sample,TMT,ProteinID,final_norm,box_cox_scaled_values)
#Adding option to export data in long or wide format
if(data_format == "long"){
return(output)
}else if(data_format == "wide"){
output2 = output %>%
dplyr::select(Sample,TMT,ProteinID,box_cox_scaled_values) %>%
tidyr::pivot_wider(names_from = c("Sample","TMT"), values_from = box_cox_scaled_values)
return(output2)
}else{
print("format must be either long or wide")
}
}
data = read_delim("tests/testdata/combine_psm_fractions/PCB002_PSMs_Proteodiscover_output.txt") %>%
combine_psm_fractions() %>%
normalize_to_bridge(bridge_channel_plex = 126) %>%
la_box_cox_norm_t4()
