dplyr::rename(Abundance..132N = "Abundance: 132N",
Abundance..132C = "Abundance: 132C",
Abundance..133N = "Abundance: 133N",
Abundance..133C = "Abundance: 133C",
Abundance..134N ="Abundance: 134N",
PSM.Ambiguity ="PSM Ambiguity",
Isolation.Interference.... = "Isolation Interference [%]",
Spectrum.File = "Spectrum File",
Master.Protein.Accessions = "Master Protein Accessions") %>%
combine_psm_fractions_replica() %>%
ungroup()
bridge_channel_plex = "126"
Bridge = data %>%
dplyr::select(dplyr::contains(bridge_channel_plex))
col_name = names(Bridge)
median_bridge = Bridge %>%
dplyr::pull(col_name) %>%
median()
#Might want to group this by plex? Not sure, should think about this in the future.
norm_bridge = Bridge %>%
dplyr::mutate(norm_Abundance = !!rlang::sym(col_name) / median_bridge) %>%
dplyr::select(norm_Abundance)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#selecting the columns containing the protein information (columns 1 and 2 from original data frame)
protein_data = dplyr::select(data, 1:2)
#Constructing the output with the normalized values and such.
output = dplyr::bind_cols(protein_data,norm_final)
View(output)
View(combined_norm)
View(combined_norm)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
View(combined_norm)
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample,Accession) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample,Master.Protein.Accessions) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample,Master.Protein.Accessions) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance))
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#here data has been normalized to bridge
combined_norm = dplyr::bind_cols(data,norm_bridge) %>%
dplyr::group_by(Sample,Master.Protein.Accessions) %>%
dplyr::mutate(dplyr::across(dplyr::contains("Abundance"), ~.x/norm_Abundance)) %>%
dplyr::ungroup()
#Here we are pulling out the data from all plexes and taking the median for each
medians = combined_norm %>%
select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map_dbl(median)
#Here we normalize the values from each plex by dividing  by the median that we calculated previously
norm_final = combined_norm %>%
dplyr::select(contains("Abundance"),-norm_Abundance, -!!rlang::sym(col_name)) %>%
purrr::map2_df(medians,~.x/ .y)
#selecting the columns containing the protein information (columns 1 and 2 from original data frame)
protein_data = dplyr::select(data, 1:2)
#Constructing the output with the normalized values and such.
output = dplyr::bind_cols(protein_data,norm_final)
View(output)
View(norm_bridge)
View(nonrejected)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2);
library(directlabels);
library(gridExtra);
library(hexbin);
library(Hmisc);
library(gplots);
library(RColorBrewer);
library(FactoMineR);
library(parallel);
library(foreach);
library(doParallel);
library(plyr);
library(reshape);
library(doSNOW);
library(svDialogs);
library(stringr)
## Filters out psms with "Rejected" in the PSM Ambiguity column
ambfilter <- function(x){
x[!(x$PSM.Ambiguity == "Rejected"),]
}
## Averages the psm quantification from each TMT label
addAvgSN <- function(inDF, tmts){
cbind(inDF, AvgSN = rowMeans(inDF[,tmts]))
}
## Filters out psms with an average Signal:Noise < 10
Snfilter <- function(x){
x[!(x$AvgSN < 10),]
}
## Filters out psms with an isolation interferenece > 25
specfilter <- function(x){
x[!(x$Isolation.Interference.... > 30),]
}
## Extract the columns we need
extract <- function(x, tmts){
x[,c("Master.Protein.Accessions", tmts)]
}
## Sum the values for each unique protein ID
sumvals <- function(x){
ddply(x,.(Master.Protein.Accessions),summarize,
Abundance..126.1=sum(Abundance..126),
Abundance..127N.1=sum(Abundance..127N),
Abundance..127C.1=sum(Abundance..127C),
Abundance..128N.1=sum(Abundance..128N),
Abundance..128C.1=sum(Abundance..128C),
Abundance..129N.1=sum(Abundance..129N),
Abundance..129C.1=sum(Abundance..129C),
Abundance..130N.1=sum(Abundance..130N),
Abundance..130C.1=sum(Abundance..130C),
Abundance..131N.1=sum(Abundance..131N),
Abundance..131C.1=sum(Abundance..131C),
Abundance..132N.1=sum(Abundance..132N),
Abundance..132C.1=sum(Abundance..132C),
Abundance..133N.1=sum(Abundance..133N),
Abundance..133C.1=sum(Abundance..133C),
Abundance..134N.1=sum(Abundance..134N))
}
## Change column names to append file they came from
namexchange <- function(x,y){
colnames(x)[names(x) == "Master.Protein.Accessions"] <- c(paste("ProteinID"))
colnames(x)[names(x) == "Abundance..126.1"] <- c(paste("Abundance..126", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..127N.1"] <- c(paste("Abundance..127n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..127C.1"] <- c(paste("Abundance..127c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..128N.1"] <- c(paste("Abundance..128n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..128C.1"] <- c(paste("Abundance..128c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..129N.1"] <- c(paste("Abundance..129n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..129C.1"] <- c(paste("Abundance..129c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..130N.1"] <- c(paste("Abundance..130n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..130C.1"] <- c(paste("Abundance..130c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..131N.1"] <- c(paste("Abundance..131n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..131C.1"] <- c(paste("Abundance..131c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..132N.1"] <- c(paste("Abundance..132n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..132C.1"] <- c(paste("Abundance..132c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..133N.1"] <- c(paste("Abundance..133n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..133C.1"] <- c(paste("Abundance..133c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..134N.1"] <- c(paste("Abundance..134n", {y}, sep = "_"))
return(x)
}
namexchange2 <- function(x,y){
colnames(x)[names(x) == "Master.Protein.Accessions"] <- c(paste("ProteinID"))
if(exists("Abundance..126.1")) colnames(x)[names(x) == "Abundance..126.1"] <- c(paste("Abundance..126", {y}, sep = "_"))
if(exists("Abundance..127N.1")) colnames(x)[names(x) == "Abundance..127N.1"] <- c(paste("Abundance..127n", {y}, sep = "_"))
if(exists("Abundance..127C.1")) colnames(x)[names(x) == "Abundance..127C.1"] <- c(paste("Abundance..127c", {y}, sep = "_"))
if(exists("Abundance..128N.1")) colnames(x)[names(x) == "Abundance..128N.1"] <- c(paste("Abundance..128n", {y}, sep = "_"))
if(exists("Abundance..128C.1")) colnames(x)[names(x) == "Abundance..128C.1"] <- c(paste("Abundance..128c", {y}, sep = "_"))
if(exists("Abundance..129N.1")) colnames(x)[names(x) == "Abundance..129N.1"] <- c(paste("Abundance..129n", {y}, sep = "_"))
if(exists("Abundance..129C.1")) colnames(x)[names(x) == "Abundance..129C.1"] <- c(paste("Abundance..129c", {y}, sep = "_"))
if(exists("Abundance..130N.1")) colnames(x)[names(x) == "Abundance..130N.1"] <- c(paste("Abundance..130n", {y}, sep = "_"))
if(exists("Abundance..130C.1")) colnames(x)[names(x) == "Abundance..130C.1"] <- c(paste("Abundance..130c", {y}, sep = "_"))
if(exists("Abundance..131N.1")) colnames(x)[names(x) == "Abundance..131N.1"] <- c(paste("Abundance..131N", {y}, sep = "_"))
if(exists("Abundance..131C.1")) colnames(x)[names(x) == "Abundance..131C.1"] <- c(paste("Abundance..131C", {y}, sep = "_"))
if(exists("Abundance..132N.1")) colnames(x)[names(x) == "Abundance..132N.1"] <- c(paste("Abundance..132N", {y}, sep = "_"))
if(exists("Abundance..132C.1")) colnames(x)[names(x) == "Abundance..132C.1"] <- c(paste("Abundance..132C", {y}, sep = "_"))
if(exists("Abundance..133N.1")) colnames(x)[names(x) == "Abundance..133N.1"] <- c(paste("Abundance..133N", {y}, sep = "_"))
if(exists("Abundance..133C.1")) colnames(x)[names(x) == "Abundance..133C.1"] <- c(paste("Abundance..133C", {y}, sep = "_"))
if(exists("Abundance..134N.1")) colnames(x)[names(x) == "Abundance..134N.1"] <- c(paste("Abundance..134N", {y}, sep = "_"))
return(x)
}
ldf <- list() # creates a list for the data files
nonrejected <-list() #creates a list for the non-rejected data
na.as.one <-list() #creates a list when replacing the NA values of the quantifications with 1's for proper averaging
signal <-list() #creates a list for data summing sn for all channels
Sn <-list() #creates a list for data removing below SN threshold
spec <-list()#creates a list for data removing blow specificity threshold
spec2 <- list()
NAgone <-list()#creates a list for data removing rows with NAs
extractA <-list()#creates a list for dataframes with extracted columns
extractB <-list()#creates a list for dataframes with extracted columns
values <-list()#creates a list for final summed values
final <-list()#creates a list for final values with named columns
filePD <- list()#creates a list for the file from Proteome Discoverer
listcsv <- list()#creates a list for separated files from the PD output
tmtlablist <- list("Abundance..126", "Abundance..127N", "Abundance..127C", "Abundance..128N","Abundance..128C", "Abundance..129N","Abundance..129C",
"Abundance..130N","Abundance..130C", "Abundance..131N","Abundance..131C", "Abundance..132N", "Abundance..132C", "Abundance..133N",
"Abundance..133C", "Abundance..134N") #List of potential TMT labels
labelsperfile <- list()
# list("Abundance..126.1", "Abundance..127n.1", "Abundance..127c.1", "Abundance..128n.1", "Abundance..128c.1", "Abundance..129n.1", "Abundance..129c.1", "Abundance..130n.1", "Abundance..130c.1", "Abundance..131.1")
temp <- list()
fileIDs <- c()
filePD[[1]] = read.csv("PSM_output_fractions_assigned.csv", header = TRUE) ## specify file from PD
n = 9
# for(i in 1:n){
#   tempID <- dlgInput(message = "Enter a unique string from each file name: ", default = "")$res
#   #tempPos <- gregexpr(':',tempID)[[1]][2]
#   #tempID <- substr(tempID, tempPos+1, nchar(tempID))
#   fileIDs <- c(fileIDs, tempID)
# }
fileIDs = c("DG014843","DG014860","DG014877","DG014894","DG014911","DG014928","DG014945","DG014962","DG014979")
for(i in 1:n){
tmtlab <- dlgList(tmtlablist, multiple = TRUE)$res
labelsperfile[i] <- list(tmtlab)
}
rm(list =ls()
)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2);
library(directlabels);
library(gridExtra);
library(hexbin);
library(Hmisc);
library(gplots);
library(RColorBrewer);
library(FactoMineR);
library(parallel);
library(foreach);
library(doParallel);
library(plyr);
library(reshape);
library(doSNOW);
library(svDialogs);
library(stringr)
## Filters out psms with "Rejected" in the PSM Ambiguity column
ambfilter <- function(x){
x[!(x$PSM.Ambiguity == "Rejected"),]
}
## Averages the psm quantification from each TMT label
addAvgSN <- function(inDF, tmts){
cbind(inDF, AvgSN = rowMeans(inDF[,tmts]))
}
## Filters out psms with an average Signal:Noise < 10
Snfilter <- function(x){
x[!(x$AvgSN < 10),]
}
## Filters out psms with an isolation interferenece > 25
specfilter <- function(x){
x[!(x$Isolation.Interference.... > 30),]
}
## Extract the columns we need
extract <- function(x, tmts){
x[,c("Master.Protein.Accessions", tmts)]
}
## Sum the values for each unique protein ID
sumvals <- function(x){
ddply(x,.(Master.Protein.Accessions),summarize,
Abundance..126.1=sum(Abundance..126),
Abundance..127N.1=sum(Abundance..127N),
Abundance..127C.1=sum(Abundance..127C),
Abundance..128N.1=sum(Abundance..128N),
Abundance..128C.1=sum(Abundance..128C),
Abundance..129N.1=sum(Abundance..129N),
Abundance..129C.1=sum(Abundance..129C),
Abundance..130N.1=sum(Abundance..130N),
Abundance..130C.1=sum(Abundance..130C),
Abundance..131N.1=sum(Abundance..131N),
Abundance..131C.1=sum(Abundance..131C),
Abundance..132N.1=sum(Abundance..132N),
Abundance..132C.1=sum(Abundance..132C),
Abundance..133N.1=sum(Abundance..133N),
Abundance..133C.1=sum(Abundance..133C),
Abundance..134N.1=sum(Abundance..134N))
}
## Change column names to append file they came from
namexchange <- function(x,y){
colnames(x)[names(x) == "Master.Protein.Accessions"] <- c(paste("ProteinID"))
colnames(x)[names(x) == "Abundance..126.1"] <- c(paste("Abundance..126", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..127N.1"] <- c(paste("Abundance..127n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..127C.1"] <- c(paste("Abundance..127c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..128N.1"] <- c(paste("Abundance..128n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..128C.1"] <- c(paste("Abundance..128c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..129N.1"] <- c(paste("Abundance..129n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..129C.1"] <- c(paste("Abundance..129c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..130N.1"] <- c(paste("Abundance..130n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..130C.1"] <- c(paste("Abundance..130c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..131N.1"] <- c(paste("Abundance..131n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..131C.1"] <- c(paste("Abundance..131c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..132N.1"] <- c(paste("Abundance..132n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..132C.1"] <- c(paste("Abundance..132c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..133N.1"] <- c(paste("Abundance..133n", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..133C.1"] <- c(paste("Abundance..133c", {y}, sep = "_"))
colnames(x)[names(x) == "Abundance..134N.1"] <- c(paste("Abundance..134n", {y}, sep = "_"))
return(x)
}
namexchange2 <- function(x,y){
colnames(x)[names(x) == "Master.Protein.Accessions"] <- c(paste("ProteinID"))
if(exists("Abundance..126.1")) colnames(x)[names(x) == "Abundance..126.1"] <- c(paste("Abundance..126", {y}, sep = "_"))
if(exists("Abundance..127N.1")) colnames(x)[names(x) == "Abundance..127N.1"] <- c(paste("Abundance..127n", {y}, sep = "_"))
if(exists("Abundance..127C.1")) colnames(x)[names(x) == "Abundance..127C.1"] <- c(paste("Abundance..127c", {y}, sep = "_"))
if(exists("Abundance..128N.1")) colnames(x)[names(x) == "Abundance..128N.1"] <- c(paste("Abundance..128n", {y}, sep = "_"))
if(exists("Abundance..128C.1")) colnames(x)[names(x) == "Abundance..128C.1"] <- c(paste("Abundance..128c", {y}, sep = "_"))
if(exists("Abundance..129N.1")) colnames(x)[names(x) == "Abundance..129N.1"] <- c(paste("Abundance..129n", {y}, sep = "_"))
if(exists("Abundance..129C.1")) colnames(x)[names(x) == "Abundance..129C.1"] <- c(paste("Abundance..129c", {y}, sep = "_"))
if(exists("Abundance..130N.1")) colnames(x)[names(x) == "Abundance..130N.1"] <- c(paste("Abundance..130n", {y}, sep = "_"))
if(exists("Abundance..130C.1")) colnames(x)[names(x) == "Abundance..130C.1"] <- c(paste("Abundance..130c", {y}, sep = "_"))
if(exists("Abundance..131N.1")) colnames(x)[names(x) == "Abundance..131N.1"] <- c(paste("Abundance..131N", {y}, sep = "_"))
if(exists("Abundance..131C.1")) colnames(x)[names(x) == "Abundance..131C.1"] <- c(paste("Abundance..131C", {y}, sep = "_"))
if(exists("Abundance..132N.1")) colnames(x)[names(x) == "Abundance..132N.1"] <- c(paste("Abundance..132N", {y}, sep = "_"))
if(exists("Abundance..132C.1")) colnames(x)[names(x) == "Abundance..132C.1"] <- c(paste("Abundance..132C", {y}, sep = "_"))
if(exists("Abundance..133N.1")) colnames(x)[names(x) == "Abundance..133N.1"] <- c(paste("Abundance..133N", {y}, sep = "_"))
if(exists("Abundance..133C.1")) colnames(x)[names(x) == "Abundance..133C.1"] <- c(paste("Abundance..133C", {y}, sep = "_"))
if(exists("Abundance..134N.1")) colnames(x)[names(x) == "Abundance..134N.1"] <- c(paste("Abundance..134N", {y}, sep = "_"))
return(x)
}
ldf <- list() # creates a list for the data files
nonrejected <-list() #creates a list for the non-rejected data
na.as.one <-list() #creates a list when replacing the NA values of the quantifications with 1's for proper averaging
signal <-list() #creates a list for data summing sn for all channels
Sn <-list() #creates a list for data removing below SN threshold
spec <-list()#creates a list for data removing blow specificity threshold
spec2 <- list()
NAgone <-list()#creates a list for data removing rows with NAs
extractA <-list()#creates a list for dataframes with extracted columns
extractB <-list()#creates a list for dataframes with extracted columns
values <-list()#creates a list for final summed values
final <-list()#creates a list for final values with named columns
filePD <- list()#creates a list for the file from Proteome Discoverer
listcsv <- list()#creates a list for separated files from the PD output
tmtlablist <- list("Abundance..126", "Abundance..127N", "Abundance..127C", "Abundance..128N","Abundance..128C", "Abundance..129N","Abundance..129C",
"Abundance..130N","Abundance..130C", "Abundance..131N","Abundance..131C", "Abundance..132N", "Abundance..132C", "Abundance..133N",
"Abundance..133C", "Abundance..134N") #List of potential TMT labels
labelsperfile <- list()
# list("Abundance..126.1", "Abundance..127n.1", "Abundance..127c.1", "Abundance..128n.1", "Abundance..128c.1", "Abundance..129n.1", "Abundance..129c.1", "Abundance..130n.1", "Abundance..130c.1", "Abundance..131.1")
temp <- list()
fileIDs <- c()
filePD[[1]] = read.csv("PSM_output_fractions_assigned.csv", header = TRUE) ## specify file from PD
n = 9
# for(i in 1:n){
#   tempID <- dlgInput(message = "Enter a unique string from each file name: ", default = "")$res
#   #tempPos <- gregexpr(':',tempID)[[1]][2]
#   #tempID <- substr(tempID, tempPos+1, nchar(tempID))
#   fileIDs <- c(fileIDs, tempID)
# }
fileIDs = c("DG014843","DG014860","DG014877","DG014894","DG014911","DG014928","DG014945","DG014962","DG014979")
for(i in 1:n){
tmtlab <- dlgList(tmtlablist, multiple = TRUE)$res
labelsperfile[i] <- list(tmtlab)
}
dir.create("CSVs_1")
setwd("CSVs_1/")
for(i in 1:n){
t1 <- filePD[[1]][,"Spectrum.File"][grepl(fileIDs[i], filePD[[1]][,"Spectrum.File"])]
t2 <- filePD[[1]][filePD[[1]][,"Spectrum.File"] %in% t1,]
write.csv(t2, file=paste(fileIDs[i], ".csv", sep=""))
}
filePD[[1]]
setwd("CSVs_1/") ## change to dir containing csv
listcsv <- dir(pattern = "*.csv")
temp <- NULL
temp2 <- NULL
for (k in 1:length(listcsv)){
temp <- labelsperfile[[k]]
temp2 <- paste(temp, ".1", sep="")
ldf[[k]] = read.csv(listcsv[k])
nonrejected[[k]] = data.frame(lapply(ldf[k], ambfilter))
nonrejected[[k]][,(ncol(nonrejected[[k]])-9):ncol(nonrejected[[k]])][is.na(nonrejected[[k]][,(ncol(nonrejected[[k]])-9):ncol(nonrejected[[k]])])] <- 1
signal[[k]] = data.frame(lapply(nonrejected[k], addAvgSN, temp))
Sn[[k]] = data.frame(lapply(signal[k], Snfilter))
spec[[k]] = data.frame(lapply(Sn[k], specfilter))
extractA[[k]] = data.frame(lapply(spec[k], extract, unlist(tmtlablist)))
values[[k]] = data.frame(lapply(extractA[k], sumvals))
extractB[[k]] = data.frame(lapply(values[k], extract, temp2))
print(k)
#Change column names to append file they came from
final[[k]] = data.frame(lapply(extractB[k], namexchange, listcsv[k]))
}
setwd("CSVs_1/")
#Merge all data frames in list by the column ProteinID
finalvalues <- data.frame(Reduce(function(x,y) merge(x,y,all=TRUE), final))
#finalvalues <- finalvalues[2:nrow(finalvalues),]
#rm(NAgone, Sn, extractA, extractB, final, ldf, signal, spec, values)
write.table(finalvalues, 'nonnormalizeddataall.txt', sep = "\t", row.names = FALSE, col.names = TRUE)
#Extract 126 and 131 values to new dataframes respectively
data126 <- data.frame(cbind(finalvalues$ProteinID,finalvalues[,grepl("126", names(finalvalues))]))
#data131 <- data.frame(cbind(finalvalues$ProteinID,finalvalues[,grepl("131", names(finalvalues))]))
sdsdsdsdholder <- c(which(grepl("126", names(finalvalues)) == TRUE));
holder2 <- setdiff(c(1:length(finalvalues)), holder);
setwd("CSVs_1/")
#Merge all data frames in list by the column ProteinID
finalvalues <- data.frame(Reduce(function(x,y) merge(x,y,all=TRUE), final))
#finalvalues <- finalvalues[2:nrow(finalvalues),]
#rm(NAgone, Sn, extractA, extractB, final, ldf, signal, spec, values)
write.table(finalvalues, 'nonnormalizeddataall.txt', sep = "\t", row.names = FALSE, col.names = TRUE)
#Extract 126 and 131 values to new dataframes respectively
data126 <- data.frame(cbind(finalvalues$ProteinID,finalvalues[,grepl("126", names(finalvalues))]))
#data131 <- data.frame(cbind(finalvalues$ProteinID,finalvalues[,grepl("131", names(finalvalues))]))
holder <- c(which(grepl("126", names(finalvalues)) == TRUE));
holder2 <- setdiff(c(1:length(finalvalues)), holder);
datarest <- data.frame(finalvalues[,holder2])
avgnorm = c();
testlist <- c()
datarest[,2:labelsperfile[[1]]]
datarest[,2:length(labelsperfile[[1]]])
datarest[,2:length(labelsperfile[[1]])]
##figuring out what the loop is doing:
#first iteration
test = datarest[,2:length(labelsperfile[[1]])]
View(test)
length(labelsperfile[[1-1]])
length(labelsperfile[[0]])
length(labelsperfile[[1]])
x1 + length(labelsperfile[[2-1]]) - 1
2 + length(labelsperfile[[2-1]]) - 1
2 + length(labelsperfile[[1]]) - 2
16 + length(labelsperfile[[2]]) - 1
View(labelsperfile)
#This is the loop
for (i in 1:length(listcsv)){
if(i==1){
#2 becuase first column is protein ID
#This seems right
x1 <- 2
#x2 <- 2 + length(labelsperfile[[i]]) - 3
x2 <- 2 + length(labelsperfile[[i]]) - 2
}else{
#x1 <- x1 + length(labelsperfile[[i-1]]) - 2
#x2 <- x2 + length(labelsperfile[[i]]) - 2
#- 1 because we have removed the 126 label
#This works. Functionally a fancy way of adding 15
#Essentially we are selecting the columns bor each sample by position
x1 <- x1 + length(labelsperfile[[i-1]]) - 1
x2 <- x2 + length(labelsperfile[[i]]) - 1
}
#subsets the data to pick the 15 plexes from each sample.
subset = datarest[,x1:x2]
# selected the proper 126 column by location (i + 1)
#Divides the 126 from each sample by the total median of all the 126s
subset2 = subset/(data126[,i+1]/median(unlist(data126[,2:(1+length(listcsv))]), na.rm = TRUE))
#subset3 = subset/(data131[,i+1]/median(unlist(data131[,2:(1+length(listcsv))]), na.rm = TRUE))
if(i == 1)
{
#avgnorm = (subset2+subset3)/2;
avgnorm = (subset2)
}else
{
#avgnorm = cbind(avgnorm, (subset2+subset3)/2);
avgnorm = cbind(avgnorm, subset2);
}
}
write.table(avgnorm, 'avgnormalizeddataall.txt', sep = "\t", row.names = FALSE, col.names = TRUE)
#Taking the overall median of the data ( except for 126)
datamedian <- median(unlist(avgnorm[,1:length(avgnorm)]), na.rm = TRUE)
View(avgnorm)
data126[,1+1]
datamedian <- median(unlist(avgnorm[,1:length(avgnorm)]), na.rm = TRUE)
finalnorm = data.frame()
colmeds <- list()
for (j in 1:dim(avgnorm)[2]){
colmeds[[j]] = median(unlist(avgnorm[,j]), na.rm = TRUE)
if(j == 1)
{
finalnorm = data.frame(avgnorm[,j]/(as.numeric(colmeds[j])/datamedian));
} else
{
finalnorm = data.frame(cbind(finalnorm, avgnorm[,j]/(as.numeric(colmeds[j])/datamedian)));
}
}
median(unlist(data126[,2:(1+length(listcsv))]))
median(unlist(data126[,2:(1+length(listcsv))]),na.rm=T)
data126[,i+1]
subset2
median(unlist(avgnorm[,1]), na.rm = TRUE)
avgnorm[,1]
median(unlist(avgnorm[,1]), na.rm = TRUE)
