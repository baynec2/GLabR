adjusted_volume =  adjustments / volume_of_each_barcode_added
sum(adjusted_volume)
adjusted_volume =  volume_of_each_barcode_added / adjustments
adjusted_volume
proportion_of_bases[[1]]
adjustments
adjusted_volume =  (volume_of_each_barcode_added * length(barcodes) )/ (volume_of_each_barcode_added * adjustments)
adjusted_volume
adjusted_volume =  (volume_of_each_barcode_added * length(barcodes))/ (volume_of_each_barcode_added * adjustments)
adjusted_volume =  (volume_of_each_barcode_added * length(barcodes)) / (volume_of_each_barcode_added * adjustments)
adjusted_volume
90 * 1.25
adjustments
sum(proportion_of_bases)
adjusted_volume =   (volume_of_each_barcode_added * adjustments)
adjusted_volume
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100/ (expected_proportion / proportion_of_bases)
sum(adjustments)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  900/ (expected_proportion / proportion_of_bases)
sum(adjustments)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  (expected_proportion / proportion_of_bases) /100
sum(adjustments)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  (expected_proportion / proportion_of_bases) /90
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100 / (expected_proportion / proportion_of_bases) * 90
sum(adjustments)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100 / (expected_proportion / proportion_of_bases)
sum(adjustments)
barcode_1 = 0.25
adjustment = 0.5/barcode_1
adjustment
barcodes = c(barcode_1,barcode_2)
adjustment = 0.5/barcodes
adjustment
barcode_1 = 0.25
barcode_2 = 0.75
barcodes = c(barcode_1,barcode_2)
adjustment = 0.5/barcodes
adjustment
0.75 * 0.6666667
adjusted_volume = 1.25 * adjustment
adjusted_volume
1.25 * 2
barcode_1 = 0.25
barcode_2 = 0.75
barcodes = c(barcode_1,barcode_2)
#equation = total_volume =
adjustment = 0.5/barcodes
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjusments)
x = (total_volume / sum_of_proportions)
barcodes = test$barcode
proportion_of_bases = test$proportion_of_bases
volume_of_each_barcode_added = 1.25
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100 / (expected_proportion / proportion_of_bases)
# how would this translate into the amount of volume that needs to be added?
# to get this we just need to divide the volume that was added by the  the adby the volume of each barcode that was added in the first place
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjusments)
barcodes = test$barcode
proportion_of_bases = test$proportion_of_bases
volume_of_each_barcode_added = 1.25
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100 / (expected_proportion / proportion_of_bases)
# how would this translate into the amount of volume that needs to be added?
# to get this we just need to divide the volume that was added by the  the adby the volume of each barcode that was added in the first place
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
sum(adjusted_volume)
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjusted_volume_uL= adjusted_volume)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25 ){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments =  100 / (expected_proportion / proportion_of_bases)
# how would this translate into the amount of volume that needs to be added?
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjusted_volume_uL= adjusted_volume)
return(df)
}
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25 ){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments = expected_proportion * proportion_of_bases
# how would this translate into the amount of volume that needs to be added?
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjustment = adjustmentadjusted_volume_uL= adjusted_volume)
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjustment = adjustments,adjusted_volume_uL= adjusted_volume)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25 ){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments = expected_proportion * proportion_of_bases
# how would this translate into the amount of volume that needs to be added?
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjustment = adjustments,adjusted_volume_uL= adjusted_volume)
return(df)
}
# Generating test data
values = runif(90)
x = values/sum(values)
test = data.frame(barcode = 1:90, proportion_of_bases= x)
#testing values
barcodes = test$barcode
proportion_of_bases = test$proportion_of_bases
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25 ){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments = expected_proportion / proportion_of_bases
# how would this translate into the amount of volume that needs to be added?
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
df = tibble::tibble(barcodes = barcodes, proportion_of_bases = proportion_of_bases, adjustment = adjustments,adjusted_volume_uL= adjusted_volume)
return(df)
}
# Generating test data
values = runif(90)
x = values/sum(values)
test = data.frame(barcode = 1:90, proportion_of_bases= x)
#testing values
barcodes = test$barcode
proportion_of_bases = test$proportion_of_bases
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25)
adjust_nanopore_barcodes(barcodes,proportion_of_bases,epected_proportion = epected_proportion,volume_of_each_barcode_added = 1.25)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25 ){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments = expected_proportion / proportion_of_bases
# how would this translate into the amount of volume that needs to be added?
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = 1.25 * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
df = tibble::tibble(barcodes = barcodes,
proportion_of_bases = proportion_of_bases,
expected_proportion = expected_proportion,
adjustment = adjustments,
adjusted_volume_uL= adjusted_volume)
return(df)
}
# Generating test data
values = runif(90)
x = values/sum(values)
test = data.frame(barcode = 1:90, proportion_of_bases= x)
#testing values
barcodes = test$barcode
proportion_of_bases = test$proportion_of_bases
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25)
t = adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25)
sum(t$adjusted_volume_uL)
t
sum(t$adjusted_volume_uL)
adjust_nanopore_barcodes(c(1,2),c(0.75,0.25))
adjust_nanopore_barcodes(c(1,2),c(0.8,0.20))
devtools::document()
devtools::document()
rm(list = c("adjust_nanopore_barcodes"))
devtools::document()
devtools::document()
devtools::document()
#' @return a tibble with intermediate calculations and final volume to be added.
#' @export
#'
#' @examples
#'values = runif(90)
#'x = values/sum(values)
#'barcodes = test$barcode
#'proportion_of_bases = test$proportion_of_bases
#'volume_of_each_barcode_added = 1.25
#'adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25,same_total_volume == TRUE)
adjust_nanopore_barcodes = function(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25,same_total_volume = TRUE){
# What proportion would each barcode be if everything worked such that each barcode was evenly distributed.
expected_proportion = 1/ length(barcodes)
# what would the adjustment factor have to be to match the expected proportions given each proportion that was actually observed?
adjustments = expected_proportion / proportion_of_bases
# how would this translate into the amount of volume that needs to be added?
if(same_total_volume == TRUE){
# This gives the same volume at the end as what the original protocol calls for.
# You could also argue that you don't need to do that, you could just use a greater volume since there is an ampure cleanup.
# factor to multiply by adjustment = total_volume / sum of proportions
# adjusted volume = factor to multiply by adjustment * adjustment
total_volume = volume_of_each_barcode_added * length(barcodes)
sum_of_proportions = sum(adjustments)
x = (total_volume / sum_of_proportions)
adjusted_volume = x * adjustments
}else{
adjusted_volume = adjustments * volume_of_each_barcode_added
}
df = tibble::tibble(barcodes = barcodes,
proportion_of_bases = proportion_of_bases,
expected_proportion = expected_proportion,
adjustment = adjustments,
adjusted_volume_uL= adjusted_volume)
return(df)
}
devtools::document()
rm(list = c("adjust_nanopore_barcodes"))
devtools::document()
library(GLabR)
adjust_nanopore_barcodes(barcodes,
proportion_of_bases,
volume_of_each_barcode_added = 1.25,
same_total_volume = TRUE)
barcodes = c("one","two")
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,
proportion_of_bases,
volume_of_each_barcode_added = 1.25,
same_total_volume = TRUE)
rm(list = ls())
barcodes = c("one","two")
proportion_of_bases = c(0.8,0.2)
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,
proportion_of_bases,
volume_of_each_barcode_added = 1.25,
same_total_volume = TRUE)
adjust_nanopore_barcodes(barcodes,
proportion_of_bases,
volume_of_each_barcode_added = 1.25,
same_total_volume = FALSE)
values = runif(90)
values/sum(values)
values = runif(90)
x = values/sum(values)
barcodes =test$barcode
barcodes =1:90
proportion_of_bases = test$proportion_of_bases
proportion_of_bases = values/sum(values)
values = runif(90)
proportion_of_bases = values/sum(values)
barcodes =1:90
values = runif(90)
proportion_of_bases = values/sum(values)
barcodes =1:90
volume_of_each_barcode_added = 1.25
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25,same_total_volume == TRUE)
adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25,same_total_volume = TRUE)
d = adjust_nanopore_barcodes(barcodes,proportion_of_bases,volume_of_each_barcode_added = 1.25,same_total_volume = TRUE)
d
sum(d$adjusted_volume_uL)
1.25 * 90
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
md = readxl::read_excel("../metadata.xlsx")
View(md)
?readxl::read_excel
md = readxl::read_excel("../cleaned_metadata.xlsx")
md = readxl::read_excel("../cleaned_metadata.xlsx")
View(md)
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
write_csv(md,"cleaned_metadata.csv")
hist(md$death_during_admission)
p1 = ggplot(aes(death_during_admission))+
geom_col()
p1 = md %>%
ggplot(aes(death_during_admission))+
geom_col()
p1 = md %>%
ggplot(aes(death_during_admission))+
geom_col()
p1
p1 = md %>%
ggplot(aes(death_during_admission))+
geom_bar()
p1
diseased = md %>%
filter(dm_number != "HEALTHY")
p1 = diseased %>%
ggplot(aes(death_during_admission))+
geom_bar()
p1
View(diseased)
p1 = diseased %>%
ggplot(aes(death_during_admission))+
geom_bar()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial))+
geom_histogram()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial,color = death_during_admission))+
geom_histogram()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial,fill = death_during_admission))+
geom_histogram()+
ggtitle("Death during admission")
p1
p2 = diseased %>%
ggplot(aes(death_at_one_year))+
geom_bar()+
ggtitle("Death at one year")
p2
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year")
p2
p1 = diseased %>%
ggplot(aes(charleson_index,fill = death_at_one_year))+
geom_histogram()
p1
p2 = diseased %>%
ggplot(aes(bacteremia_duration,charleson_index))+
geom_histogram()
p2 = diseased %>%
ggplot(aes(bacteremia_duration,charleson_index))+
geom_point()+
geom_smooth(method = "lm")
p2
p3 = diseased %>%
ggplot(aes(polymicrobial_bacteremia,fill = urine_test_result))+
geom_bar()+
ggtitle("Polymicrobial bacteremia and urine")
p3
p3 = diseased %>%
ggplot(aes(polymicrobial_bacteremia,fill = urine_test_result))+
geom_bar()+
ggtitle("Polymicrobial bacteremia and urine test results")
p3
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
d = read_delim("../genomes/11-017.txt")
View(d)
d = d1 = read_delim("../genomes/11-017.txt",
col_names = c("qseqid", "stitle", "sstart", "send", "pident", "qlen", "length", "mismatch", "gappopen", "gaps", "evalue", "qseq", "sseq", "qframe", "sframe", "qcovs")) %>%
mutate(sampleID = stringr::str_extract(stitle,".\\/.*")) %>%
mutate(sampleID = stringr::str_remove(sampleID,"\\.\\/")) %>%
#filtering to only include the full length match to S protein
filter(length == 498)
View(d)
d = d1 = read_delim("../genomes/11-017.txt",
col_names = c("qseqid", "stitle", "sstart", "send", "pident", "qlen", "length", "mismatch", "gappopen", "gaps", "evalue", "qseq", "sseq", "qframe", "sframe", "qcovs")) %>%
mutate(sampleID = stringr::str_extract(stitle,".\\/.*")) %>%
mutate(sampleID = stringr::str_remove(sampleID,"\\.\\/"))
View(d)
d1 = read_delim("../genomes/Sprotein.txt",
col_names = c("qseqid", "stitle", "sstart", "send", "pident", "qlen", "length", "mismatch", "gappopen", "gaps", "evalue", "qseq", "sseq", "qframe", "sframe", "qcovs")) %>%
mutate(sampleID = stringr::str_extract(stitle,".\\/.*")) %>%
mutate(sampleID = stringr::str_remove(sampleID,"\\.\\/")) %>%
#filtering to only include the full length match to S protein
filter(length == 498)
#assigning each contig to a strain, did this by looking manually and matching numbers.
strains = c("19-067","19-062","11-017")
dt = bind_cols(strain = strains,d1)
DT::datatable(dt)
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs(fill)
p2
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
write_csv(md,"cleaned_metadata.csv")
diseased = md %>%
filter(dm_number != "HEALTHY")
p1 = diseased %>%
ggplot(aes(death_during_admission))+
geom_bar()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial,fill = death_during_admission))+
geom_histogram()+
ggtitle("Days in hostpital colored by death")
p1
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs(fill)
p2
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs(aes(fill))
p2
library(tidyverse)
ggplot2::theme_set(ggprism::theme_prism(palette = "viridis"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
write_csv(md,"cleaned_metadata.csv")
diseased = md %>%
filter(dm_number != "HEALTHY")
p1 = diseased %>%
ggplot(aes(death_during_admission))+
geom_bar()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial,fill = death_during_admission))+
geom_histogram()+
ggtitle("Days in hostpital colored by death")
p1
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs()
p2
p1 = diseased %>%
ggplot(aes(days_in_hosptial,fill = death_during_admission))+
geom_histogram()+
ggtitle("Days in hostpital colored by death")+
labs(fill = "dealth during admission")
p1
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs(fill = "dealth during admission")
p2
rm(list = ls())
library(ggplot2)
md = readxl::read_excel("../cleaned_metadata.xlsx") %>%
janitor::clean_names()
write_csv(md,"cleaned_metadata.csv")
diseased = md %>%
filter(dm_number != "HEALTHY")
p1 = diseased %>%
ggplot(aes(death_during_admission))+
geom_bar()+
ggtitle("Death during admission")
p1
p1 = diseased %>%
ggplot(aes(days_in_hosptial,fill = death_during_admission))+
geom_histogram()+
ggtitle("Days in hostpital colored by death")+
labs(fill = "dealth during admission")
p1
p2 = diseased %>%
ggplot(aes(death_at_one_year,fill = death_during_admission))+
geom_bar()+
ggtitle("Death at one year colored by death during admission")+
labs(fill = "dealth during admission")
p2
p3 = diseased %>%
ggplot(aes(solid_tumor))+
geom_bar()+
ggtitle("Polymicrobial bacteremia and urine test results")
p3
p1 = diseased %>%
ggplot(aes(solid_tumor))+
geom_bar()+
ggtitle("Solid tumor")
p1
