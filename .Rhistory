warnings()
View(auc)
data = parsed_hplc_chromatography_data
data = d1
#Converting to min to match hplc export
start_min = start/60
fraction_interval_min = fraction_interval/60
# filtering to only inclue time fractions are collected
data = data %>%
dplyr::filter(time_min >= start_min) %>%
dplyr::mutate(cycle_number =  ceiling((time_min-11)/ (fraction_interval_min)))
start = 660
fraction_interval = 37
#shorten lengthy name
data = parsed_hplc_chromatography_data
#Converting to min to match hplc export
start_min = start/60
fraction_interval_min = fraction_interval/60
# filtering to only inclue time fractions are collected
data = data %>%
dplyr::filter(time_min >= start_min) %>%
dplyr::mutate(cycle_number =  ceiling((time_min-11)/ (fraction_interval_min)))
View(data)
#Creating well names
rows =rep(LETTERS[1:2],each = 12)
cols = rep(1:12,2)
well_order = paste0(rows,cols)
#Determining how many
n_iterations = data %>%
dplyr::group_by(cycle_number) %>%
dplyr::summarise(n = n())
View(n_iterations)
#Cnverting well_order to well id. note there seems to be an extra iteration, hardcoding it here as A1
n_iterations$well = c(rep(well_order,nrow(n_iterations)/length(well_order)),"A1")
View(n_iterations)
# Joining with original data. Hardcoding to keep it explicit as to what samples we concationate
data2 = dplyr::inner_join(data,n_iterations, by = "cycle_number") %>%
dplyr::mutate(fraction = dplyr::case_when(well %in% c("A1","B1") ~ 1,
well %in% c("A2","B2") ~ 2,
well %in% c("A3","B3") ~ 3,
well %in% c("A4","B4") ~ 4,
well %in% c("A5","B5") ~ 5,
well %in% c("A6","B6") ~ 6,
well %in% c("A7","B7") ~ 7,
well %in% c("A8","B8") ~ 8,
well %in% c("A9","B9") ~ 9,
well %in% c("A10","B10") ~ 10,
well %in% c("A11","B11") ~ 11,
well %in% c("A12","B2") ~ 12,
TRUE ~ NA_real_))
View(data2)
fraction_auc = function(parsed_hplc_chromatography_data, start = 660, fraction_interval = 37){
#shorten lengthy name
data = parsed_hplc_chromatography_data
#Converting to min to match hplc export
start_min = start/60
fraction_interval_min = fraction_interval/60
# filtering to only inclue time fractions are collected
data = data %>%
dplyr::filter(time_min >= start_min) %>%
dplyr::mutate(cycle_number =  ceiling((time_min-11)/ (fraction_interval_min)))
#Creating well names
rows =rep(LETTERS[1:2],each = 12)
cols = rep(1:12,2)
well_order = paste0(rows,cols)
#Determining how many
n_iterations = data %>%
dplyr::group_by(cycle_number) %>%
dplyr::summarise(n = n())
#Cnverting well_order to well id. note there seems to be an extra iteration, hardcoding it here as A1
n_iterations$well = c(rep(well_order,nrow(n_iterations)/length(well_order)),"A1")
# Joining with original data. Hardcoding to keep it explicit as to what samples we concationate
data2 = dplyr::inner_join(data,n_iterations, by = "cycle_number") %>%
dplyr::mutate(fraction = dplyr::case_when(well %in% c("A1","B1") ~ 1,
well %in% c("A2","B2") ~ 2,
well %in% c("A3","B3") ~ 3,
well %in% c("A4","B4") ~ 4,
well %in% c("A5","B5") ~ 5,
well %in% c("A6","B6") ~ 6,
well %in% c("A7","B7") ~ 7,
well %in% c("A8","B8") ~ 8,
well %in% c("A9","B9") ~ 9,
well %in% c("A10","B10") ~ 10,
well %in% c("A11","B11") ~ 11,
well %in% c("A12","B12") ~ 12,
TRUE ~ NA_real_))
#calculating AUC
auc = data2 %>%
dplyr::group_by(fraction,plex) %>%
dplyr::summarise(auc = MESS::auc(time_min,mau_value,type = "linear"))
return(auc)
}
auc = fraction_auc(d1)
#calculating AUC
auc = data2 %>%
dplyr::group_by(fraction,plex) %>%
dplyr::summarise(auc = MESS::auc(time_min,mau_value,type = "linear")) %>%
dplyr::ungroup()
fraction_auc = function(parsed_hplc_chromatography_data, start = 660, fraction_interval = 37){
#shorten lengthy name
data = parsed_hplc_chromatography_data
#Converting to min to match hplc export
start_min = start/60
fraction_interval_min = fraction_interval/60
# filtering to only inclue time fractions are collected
data = data %>%
dplyr::filter(time_min >= start_min) %>%
dplyr::mutate(cycle_number =  ceiling((time_min-11)/ (fraction_interval_min)))
#Creating well names
rows =rep(LETTERS[1:2],each = 12)
cols = rep(1:12,2)
well_order = paste0(rows,cols)
#Determining how many
n_iterations = data %>%
dplyr::group_by(cycle_number) %>%
dplyr::summarise(n = n())
#Cnverting well_order to well id. note there seems to be an extra iteration, hardcoding it here as A1
n_iterations$well = c(rep(well_order,nrow(n_iterations)/length(well_order)),"A1")
# Joining with original data. Hardcoding to keep it explicit as to what samples we concationate
data2 = dplyr::inner_join(data,n_iterations, by = "cycle_number") %>%
dplyr::mutate(fraction = dplyr::case_when(well %in% c("A1","B1") ~ 1,
well %in% c("A2","B2") ~ 2,
well %in% c("A3","B3") ~ 3,
well %in% c("A4","B4") ~ 4,
well %in% c("A5","B5") ~ 5,
well %in% c("A6","B6") ~ 6,
well %in% c("A7","B7") ~ 7,
well %in% c("A8","B8") ~ 8,
well %in% c("A9","B9") ~ 9,
well %in% c("A10","B10") ~ 10,
well %in% c("A11","B11") ~ 11,
well %in% c("A12","B12") ~ 12,
TRUE ~ NA_real_))
#calculating AUC
auc = data2 %>%
dplyr::group_by(fraction,plex) %>%
dplyr::summarise(auc = MESS::auc(time_min,mau_value,type = "linear")) %>%
dplyr::ungroup()
return(auc)
}
auc = fraction_auc(d1)
warnings()
View(auc)
View(data2)
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
library(GLabR)
library(GLabR)
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc()
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc()
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc()
View(CB003)
View(CB004)
View(CB003)
View(CB004)
View(Igor)
View(Igor)
all = rbind(CB003,Igor,CB004)
View(all)
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~Experiment) %>%
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) %>%
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
View(all)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) +
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
CB003 = hplc_parser("data/CB003/")
View(CB003)
p1 = CB003 %>%
ggplot(aes(as.numeric(order), mau_value,color = plex))+
geom_point()+
geom_line()
p1
p1 = CB003 %>%
ggplot(aes(time_min, mau_value,color = order))+
facet_grid(~plex)+
geom_point()+
geom_line()
p1
library(GLabR)
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) +
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
CB003 = hplc_parser("data/CB003/")
p1 = CB003 %>%
ggplot(aes(time_min, mau_value,color = order))+
facet_grid(~plex)+
geom_point()+
geom_line()
p1
CB003 = hplc_parser("data/CB003/")
p1 = CB003 %>%
ggplot(aes(time_min, mau_value,color = order))+
facet_grid(~plex)+
geom_point()+
geom_line()
p1
library(GLabR)
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) +
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
library(GLabR)
library(GLabR)
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) +
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
View(all)
View(CB003)
View(CB004)
CB003 = hplc_parser("data/CB003/") %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
View(all)
p1 = all %>%
ggplot(aes(time_min,mau_value))+
geom_line()
p1
p1 = all %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()+
facet_wrap(~Experiment)
p1
p1 = all %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()+
facet_wrap(~experiment)
p1
p1 = all %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()
p1
p1 = all %>%
filter(plex != "BLANK") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()
p1
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11) %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()
p1
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11,
plex != "CB001") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()
p1
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11,
plex != "PCB001") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()
p1
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11,
plex != "PCB001") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()+
viridis::scale_color_viridis()
p1
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11,
plex != "PCB001") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()+
viridis::scale_color_viridis(discrete=TRUE)
p1
ggplot2::theme_set(ggprism::theme_prism())
library(GLabR)
ggplot2::theme_set(ggprism::theme_prism())
CB003 = hplc_parser("data/CB003/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
fraction_auc() %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
ggplot(aes(fraction,auc,color = plex))+
geom_point()+
geom_line()+
facet_wrap(~experiment) +
ggtitle("UV AUC per Fraction")+
viridis::scale_color_viridis(discrete = TRUE)
p1
CB003 = hplc_parser("data/CB003/") %>%
dplyr::mutate(experiment = "CB003")
Igor = hplc_parser("data/Igor_study/") %>%
dplyr::mutate(experiment = "Igor")
CB004 = hplc_parser("data/CB004/") %>%
dplyr::mutate(experiment = "CB004")
all = rbind(CB003,Igor,CB004)
p1 = all %>%
filter(plex != "BLANK",
time_min >= 11,
plex != "PCB001") %>%
ggplot(aes(time_min,mau_value,color = plex))+
geom_line()+
viridis::scale_color_viridis(discrete=TRUE)
p1
l = AnnotationHub::AnnotationHub()
?bitr
QUERY="MRKLINLIAL LIMASSVTWA QDKKSFTLED LMPGGNNYYN LLPQNLYGLQ WWGDVCINAD
IEEVKTIQPA NGKENVLITL QEVNELLANK ELGKINHFRN ASFPYAEKMM LVNTTSNKVL
IDLTKKEIIW SQPLSPKAAN QDWNKESRSL AYTLDNNLFV TTADGKTQQV TDEPKGIVCG
QSVHRQEFGI SKGTFWSPKG NLLAFYHMDE SMVTDYPQVN TSTRIATLEP DKYPMAGMTS
HKVTVGIYNP ETQKTVYLKA GDPTDRYFTN ISWSPDEKSV YVIELNRDQN HALLCCYDAE
TGEPLKSNPL YEEKHTKYVE PQHPIVFLPW DHTKFIYQSQ RDGYNHLYLM DTKTSVYPES
HGAAAGGSYR ESYKTRQLTQ GNWVVQNILG FNEKTKEVII MSTEVSPLQS NAYAVNVKTG
KRRLIGNKDG MHHVQLSGSG NYVIDNYTSF TIPRNIEIVP TSGKGKTISL LTATNPLEAY
NMPEITVGTL KAADGKTDLY YRLIKPVNFD PNKKYPAVVY VYGGPHAQLI HNNRNYDARG
WDIYMAQLGY VMLTVDNRGS DNRGLEFENC TFRQLGTEEM KDQVKGVDFL KSLGYVDNNR
IGVHGWSFGG FMTTNLMLTY PELFKVGVAG GPVIDWAYYE VMYGERYMDT PQTNPEGYKN
ANLKLRAGNL KGRLEVIIGA NDPTCVPQHS ISFLRACIDA GTQPDFFMYP GDGHNMFGRD
RVHLYERITR YFEDHLK"
PROGRAM = "blastp"
DATABASE = "refseq_protein"
#here is the base url
base_url = "https://blast.ncbi.nlm.nih.gov/Blast.cgi"
built_url = paste0(base_url,"?QUERY","&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM)
clipr::write_clip(built_url)
QUERY="MRKLINLIAL LIMASSVTWA QDKKSFTLED LMPGGNNYYN LLPQNLYGLQ WWGDVCINAD
IEEVKTIQPA NGKENVLITL QEVNELLANK ELGKINHFRN ASFPYAEKMM LVNTTSNKVL
IDLTKKEIIW SQPLSPKAAN QDWNKESRSL AYTLDNNLFV TTADGKTQQV TDEPKGIVCG
QSVHRQEFGI SKGTFWSPKG NLLAFYHMDE SMVTDYPQVN TSTRIATLEP DKYPMAGMTS
HKVTVGIYNP ETQKTVYLKA GDPTDRYFTN ISWSPDEKSV YVIELNRDQN HALLCCYDAE
TGEPLKSNPL YEEKHTKYVE PQHPIVFLPW DHTKFIYQSQ RDGYNHLYLM DTKTSVYPES
HGAAAGGSYR ESYKTRQLTQ GNWVVQNILG FNEKTKEVII MSTEVSPLQS NAYAVNVKTG
KRRLIGNKDG MHHVQLSGSG NYVIDNYTSF TIPRNIEIVP TSGKGKTISL LTATNPLEAY
NMPEITVGTL KAADGKTDLY YRLIKPVNFD PNKKYPAVVY VYGGPHAQLI HNNRNYDARG
WDIYMAQLGY VMLTVDNRGS DNRGLEFENC TFRQLGTEEM KDQVKGVDFL KSLGYVDNNR
IGVHGWSFGG FMTTNLMLTY PELFKVGVAG GPVIDWAYYE VMYGERYMDT PQTNPEGYKN
ANLKLRAGNL KGRLEVIIGA NDPTCVPQHS ISFLRACIDA GTQPDFFMYP GDGHNMFGRD
RVHLYERITR YFEDHLK"
PROGRAM = "blastp"
DATABASE = "refseq_protein"
#here is the base url
base_url = "https://blast.ncbi.nlm.nih.gov/Blast.cgi"
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM)
clipr::write_clip(built_url)
QUERY="MRKLINLIAL LIMASSVTWA QDKKSFTLED LMPGGNNYYN LLPQNLYGLQ WWGDVCINAD
IEEVKTIQPA NGKENVLITL QEVNELLANK ELGKINHFRN ASFPYAEKMM LVNTTSNKVL
IDLTKKEIIW SQPLSPKAAN QDWNKESRSL AYTLDNNLFV TTADGKTQQV TDEPKGIVCG
QSVHRQEFGI SKGTFWSPKG NLLAFYHMDE SMVTDYPQVN TSTRIATLEP DKYPMAGMTS
HKVTVGIYNP ETQKTVYLKA GDPTDRYFTN ISWSPDEKSV YVIELNRDQN HALLCCYDAE
TGEPLKSNPL YEEKHTKYVE PQHPIVFLPW DHTKFIYQSQ RDGYNHLYLM DTKTSVYPES
HGAAAGGSYR ESYKTRQLTQ GNWVVQNILG FNEKTKEVII MSTEVSPLQS NAYAVNVKTG
KRRLIGNKDG MHHVQLSGSG NYVIDNYTSF TIPRNIEIVP TSGKGKTISL LTATNPLEAY
NMPEITVGTL KAADGKTDLY YRLIKPVNFD PNKKYPAVVY VYGGPHAQLI HNNRNYDARG
WDIYMAQLGY VMLTVDNRGS DNRGLEFENC TFRQLGTEEM KDQVKGVDFL KSLGYVDNNR
IGVHGWSFGG FMTTNLMLTY PELFKVGVAG GPVIDWAYYE VMYGERYMDT PQTNPEGYKN
ANLKLRAGNL KGRLEVIIGA NDPTCVPQHS ISFLRACIDA GTQPDFFMYP GDGHNMFGRD
RVHLYERITR YFEDHLK"
PROGRAM = "blastp"
DATABASE = "refseq_protein"
FORMAT_OBJECT =" "Alignment""
FORMAT_OBJECT ="Alignment"
#here is the base url
base_url = "https://blast.ncbi.nlm.nih.gov/Blast.cgi"
QUERY="MRKLINLIAL LIMASSVTWA QDKKSFTLED LMPGGNNYYN LLPQNLYGLQ WWGDVCINAD
IEEVKTIQPA NGKENVLITL QEVNELLANK ELGKINHFRN ASFPYAEKMM LVNTTSNKVL
IDLTKKEIIW SQPLSPKAAN QDWNKESRSL AYTLDNNLFV TTADGKTQQV TDEPKGIVCG
QSVHRQEFGI SKGTFWSPKG NLLAFYHMDE SMVTDYPQVN TSTRIATLEP DKYPMAGMTS
HKVTVGIYNP ETQKTVYLKA GDPTDRYFTN ISWSPDEKSV YVIELNRDQN HALLCCYDAE
TGEPLKSNPL YEEKHTKYVE PQHPIVFLPW DHTKFIYQSQ RDGYNHLYLM DTKTSVYPES
HGAAAGGSYR ESYKTRQLTQ GNWVVQNILG FNEKTKEVII MSTEVSPLQS NAYAVNVKTG
KRRLIGNKDG MHHVQLSGSG NYVIDNYTSF TIPRNIEIVP TSGKGKTISL LTATNPLEAY
NMPEITVGTL KAADGKTDLY YRLIKPVNFD PNKKYPAVVY VYGGPHAQLI HNNRNYDARG
WDIYMAQLGY VMLTVDNRGS DNRGLEFENC TFRQLGTEEM KDQVKGVDFL KSLGYVDNNR
IGVHGWSFGG FMTTNLMLTY PELFKVGVAG GPVIDWAYYE VMYGERYMDT PQTNPEGYKN
ANLKLRAGNL KGRLEVIIGA NDPTCVPQHS ISFLRACIDA GTQPDFFMYP GDGHNMFGRD
RVHLYERITR YFEDHLK"
PROGRAM = "blastp"
DATABASE = "refseq_protein"
FORMAT_OBJECT ="Alignment"
#here is the base url
base_url = "https://blast.ncbi.nlm.nih.gov/Blast.cgi"
# building the request url
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=",FORMAT_OBJECT)
clipr::write_clip(built_url)
QUERY="MRKLINLIAL LIMASSVTWA QDKKSFTLED LMPGGNNYYN LLPQNLYGLQ WWGDVCINAD
IEEVKTIQPA NGKENVLITL QEVNELLANK ELGKINHFRN ASFPYAEKMM LVNTTSNKVL
IDLTKKEIIW SQPLSPKAAN QDWNKESRSL AYTLDNNLFV TTADGKTQQV TDEPKGIVCG
QSVHRQEFGI SKGTFWSPKG NLLAFYHMDE SMVTDYPQVN TSTRIATLEP DKYPMAGMTS
HKVTVGIYNP ETQKTVYLKA GDPTDRYFTN ISWSPDEKSV YVIELNRDQN HALLCCYDAE
TGEPLKSNPL YEEKHTKYVE PQHPIVFLPW DHTKFIYQSQ RDGYNHLYLM DTKTSVYPES
HGAAAGGSYR ESYKTRQLTQ GNWVVQNILG FNEKTKEVII MSTEVSPLQS NAYAVNVKTG
KRRLIGNKDG MHHVQLSGSG NYVIDNYTSF TIPRNIEIVP TSGKGKTISL LTATNPLEAY
NMPEITVGTL KAADGKTDLY YRLIKPVNFD PNKKYPAVVY VYGGPHAQLI HNNRNYDARG
WDIYMAQLGY VMLTVDNRGS DNRGLEFENC TFRQLGTEEM KDQVKGVDFL KSLGYVDNNR
IGVHGWSFGG FMTTNLMLTY PELFKVGVAG GPVIDWAYYE VMYGERYMDT PQTNPEGYKN
ANLKLRAGNL KGRLEVIIGA NDPTCVPQHS ISFLRACIDA GTQPDFFMYP GDGHNMFGRD
RVHLYERITR YFEDHLK"
PROGRAM = "blastp"
DATABASE = "refseq_protein"
FORMAT_OBJECT ="Alignment"
#here is the base url
base_url = "https://blast.ncbi.nlm.nih.gov/Blast.cgi"
# building the request url
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=",FORMAT_OBJECT)
clipr::write_clip(built_url)
built_url
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=","&CMD=Get","&FORMAT_OBJECT=SearchInfo")
clipr::write_clip(built_url)
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=","&CMD=Get","&FORMAT_OBJECT=SearchInfo","&FORMAT_TYPE=text")
clipr::write_clip(built_url)
clipr::write_clip(built_url)
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_TYPE=text")
#Extracting RID ID to retrieve results
clipr::write_clip(built_url)
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=","&FORMAT_OBJECT=SearchInfo","&FORMAT_TYPE=text")
clipr::write_clip(built_url)
built_url = paste0(base_url,"?QUERY=",QUERY,"&DATABASE=",DATABASE,"&PROGRAM=",PROGRAM,"&FORMAT_OBJECT=",FORMAT_OBJECT,"&FORMAT_TYPE=text")
clipr::write_clip(built_url)
